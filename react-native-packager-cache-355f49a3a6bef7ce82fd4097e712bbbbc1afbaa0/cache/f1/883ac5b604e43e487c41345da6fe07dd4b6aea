Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;
var _jsxFileName = '/home/jolszewski/Documents/ReactNativeApps/VydiaProject/node_modules/expo/src/AppLoading.js';
exports.getAppLoadingLifecycleEmitter = getAppLoadingLifecycleEmitter;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _fbemitter = require('fbemitter');

var _AppLoadingNativeWrapper = require('./AppLoadingNativeWrapper');

var _AppLoadingNativeWrapper2 = babelHelpers.interopRequireDefault(_AppLoadingNativeWrapper);

var regeneratorRuntime = require('regenerator-runtime');

var AppLoading = function (_React$Component) {
  babelHelpers.inherits(AppLoading, _React$Component);

  function AppLoading() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, AppLoading);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = AppLoading.__proto__ || Object.getPrototypeOf(AppLoading)).call.apply(_ref, [this].concat(args))), _this), _this._startLoadingAppResourcesAsync = function _callee() {
      return regeneratorRuntime.async(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (_this.props.onFinish) {
                _context.next = 2;
                break;
              }

              throw new Error('AppLoading onFinish prop is required if startAsync is provided');

            case 2:
              _context.prev = 2;
              _context.next = 5;
              return regeneratorRuntime.awrap(_this.props.startAsync());

            case 5:
              _context.next = 16;
              break;

            case 7:
              _context.prev = 7;
              _context.t0 = _context['catch'](2);

              if (_this._isMounted) {
                _context.next = 11;
                break;
              }

              return _context.abrupt('return');

            case 11:
              if (!_this.props.onError) {
                _context.next = 15;
                break;
              }

              _this.props.onError(_context.t0);
              _context.next = 16;
              break;

            case 15:
              throw _context.t0;

            case 16:
              _context.prev = 16;

              if (_this._isMounted) {
                _context.next = 19;
                break;
              }

              return _context.abrupt('return');

            case 19:
              if (_this.props.onFinish) {
                _this.props.onFinish();
              }
              return _context.finish(16);

            case 21:
            case 'end':
              return _context.stop();
          }
        }
      }, null, _this2, [[2, 7, 16, 21]]);
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(AppLoading, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._isMounted = true;
      _emitEvent('componentDidMount');

      if (this.props.startAsync) {
        this._startLoadingAppResourcesAsync().done();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._isMounted = false;
      _emitEvent('componentWillUnmount');
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_AppLoadingNativeWrapper2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      });
    }
  }]);
  return AppLoading;
}(_react2.default.Component);

exports.default = AppLoading;


var _lifecycleEmitter = void 0;
function _emitEvent(event) {
  if (_lifecycleEmitter) {
    _lifecycleEmitter.emit(event);
  }
}

function getAppLoadingLifecycleEmitter() {
  if (!_lifecycleEmitter) {
    _lifecycleEmitter = new _fbemitter.EventEmitter();
  }
  return _lifecycleEmitter;
}